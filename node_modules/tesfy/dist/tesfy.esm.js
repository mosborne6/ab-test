import { l as logicExports } from '../../../_virtual/logic.js';
import { m as murmurhashExports } from '../../../_virtual/murmurhash.js';

// @ts-ignore

var AudienceEvaluator = /*#__PURE__*/function () {
  function AudienceEvaluator() {}

  var _proto = AudienceEvaluator.prototype;

  _proto.evaluate = function evaluate(audience, attributes) {
    if (audience === void 0) {
      audience = {};
    }

    if (attributes === void 0) {
      attributes = {};
    }

    return logicExports.apply(audience, attributes);
  };

  return AudienceEvaluator;
}();

// @ts-ignore

var Bucketer = /*#__PURE__*/function () {
  function Bucketer(maxBuckets) {
    this.maxBuckets = maxBuckets;
  }

  var _proto = Bucketer.prototype;

  _proto.computeBucketId = function computeBucketId(id) {
    // @ts-ignore
    var hashValue = murmurhashExports.v3(id, Bucketer.HASH_SEED);
    var ratio = hashValue / Bucketer.MAX_HASH_VALUE;
    return Math.floor(ratio * this.maxBuckets);
  };

  _proto.bucket = function bucket(key, allocations) {
    var bucketId = this.computeBucketId(key);
    var allocation = allocations.find(function (allocation) {
      return bucketId < allocation.rangeEnd;
    });

    if (allocation) {
      return allocation.id;
    }

    return null;
  };

  return Bucketer;
}();

Bucketer.HASH_SEED = 1;
Bucketer.MAX_HASH_VALUE = /*#__PURE__*/Math.pow(2, 32) - 1;

var Config = /*#__PURE__*/function () {
  function Config(datafile, maxBuckets) {
    this.datafile = datafile;
    this.maxBuckets = maxBuckets;
  }

  var _proto = Config.prototype;

  _proto.computeRangeEnd = function computeRangeEnd(percentage) {
    return Math.floor(percentage * this.maxBuckets / 100);
  };

  _proto.getExperiments = function getExperiments() {
    var _this$datafile$experi = this.datafile.experiments,
        experiments = _this$datafile$experi === void 0 ? {} : _this$datafile$experi;
    return experiments;
  };

  _proto.getExperiment = function getExperiment(id) {
    var experiments = this.getExperiments();
    return experiments[id];
  };

  _proto.getFeatures = function getFeatures() {
    var _this$datafile$featur = this.datafile.features,
        features = _this$datafile$featur === void 0 ? {} : _this$datafile$featur;
    return features;
  };

  _proto.getFeature = function getFeature(id) {
    var features = this.getFeatures();
    return features[id];
  };

  _proto.getFeatureAllocation = function getFeatureAllocation(id) {
    var feature = this.getFeature(id);

    if (!feature) {
      return;
    }

    var rangeEnd = this.computeRangeEnd(feature.percentage);
    return {
      id: id,
      rangeEnd: rangeEnd
    };
  };

  _proto.getExperimentAllocation = function getExperimentAllocation(id) {
    var experiment = this.getExperiment(id);

    if (!experiment) {
      return;
    }

    var rangeEnd = this.computeRangeEnd(experiment.percentage);
    return {
      id: id,
      rangeEnd: rangeEnd
    };
  };

  _proto.getExperimentAllocations = function getExperimentAllocations(id) {
    var _this = this;

    var experiment = this.getExperiment(id);
    var acc = 0;
    return experiment.variations.map(function (_ref) {
      var id = _ref.id,
          percentage = _ref.percentage;
      acc += percentage;

      var rangeEnd = _this.computeRangeEnd(acc);

      return {
        id: id,
        rangeEnd: rangeEnd
      };
    });
  };

  return Config;
}();

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var Engine = /*#__PURE__*/function () {
  function Engine(_ref) {
    var datafile = _ref.datafile,
        userId = _ref.userId,
        attributes = _ref.attributes,
        storage = _ref.storage;
    this.cache = {};
    this.config = new Config(datafile, Engine.TOTAL_BUCKETS);
    this.bucketer = new Bucketer(Engine.TOTAL_BUCKETS);
    this.evaluator = new AudienceEvaluator();
    this.storage = storage;
    this.userId = userId;
    this.attributes = attributes;
  }

  var _proto = Engine.prototype;

  _proto.computeKey = function computeKey(id, userId, salt) {
    if (userId === void 0) {
      userId = '';
    }

    if (salt === void 0) {
      salt = '';
    }

    return (userId || this.userId || '').concat(id).concat(salt);
  };

  _proto.getForcedVariation = function getForcedVariation(experimentId) {
    return this.cache[experimentId];
  };

  _proto.getUserId = function getUserId() {
    return this.userId;
  };

  _proto.getAttributes = function getAttributes() {
    return this.attributes;
  };

  _proto.setUserId = function setUserId(userId) {
    this.userId = userId;
  };

  _proto.setAttributes = function setAttributes(attributes) {
    if (attributes === void 0) {
      attributes = {};
    }

    this.attributes = attributes;
  };

  _proto.setForcedVariation = function setForcedVariation(experimentId, variationId) {
    this.cache[experimentId] = variationId;
  };

  _proto.isFeatureEnabled = function isFeatureEnabled(featureId, userId, attributes) {
    var key = this.computeKey(featureId, userId);
    var feature = this.config.getFeature(featureId);

    if (!feature) {
      return null;
    }

    var audience = feature.audience;
    var allocation = this.config.getFeatureAllocation(featureId);

    if (!allocation || !this.evaluator.evaluate(audience, attributes || this.attributes)) {
      return null;
    }

    return !!this.bucketer.bucket(key, [allocation]);
  };

  _proto.getFeature = function getFeature(featureId) {
    return this.config.getFeature(featureId);
  };

  _proto.getEnabledFeatures = function getEnabledFeatures(userId, attributes) {
    var _this = this;

    var features = this.config.getFeatures();
    return Object.keys(features).reduce(function (features, featureId) {
      var _extends2;

      return _extends({}, features, (_extends2 = {}, _extends2[featureId] = _this.isFeatureEnabled(featureId, userId, attributes), _extends2));
    }, {});
  };

  _proto.getVariationId = function getVariationId(experimentId, userId, attributes) {
    var _this$storage, _this$storage2;

    var variationId = this.getForcedVariation(experimentId) || ((_this$storage = this.storage) === null || _this$storage === void 0 ? void 0 : _this$storage.get(experimentId));

    if (variationId) {
      return variationId;
    }

    var experiment = this.config.getExperiment(experimentId);

    if (!experiment) {
      return null;
    }

    var audience = experiment.audience;

    if (!this.evaluator.evaluate(audience, attributes || this.attributes)) {
      return null;
    }

    var key = this.computeKey(experimentId, userId, Engine.TRAFFIC_ALLOCATION_SALT);
    var allocation = this.config.getExperimentAllocation(experimentId);

    if (!allocation || !this.bucketer.bucket(key, [allocation])) {
      return null;
    }

    key = this.computeKey(experimentId, userId);
    var allocations = this.config.getExperimentAllocations(experimentId);
    variationId = this.bucketer.bucket(key, allocations);
    (_this$storage2 = this.storage) === null || _this$storage2 === void 0 ? void 0 : _this$storage2.store(experimentId, variationId);
    return variationId;
  };

  _proto.getVariationIds = function getVariationIds(userId, attributes) {
    var _this2 = this;

    var experiments = this.config.getExperiments();
    return Object.keys(experiments).reduce(function (experiments, experimentId) {
      var _extends3;

      return _extends({}, experiments, (_extends3 = {}, _extends3[experimentId] = _this2.getVariationId(experimentId, userId, attributes), _extends3));
    }, {});
  };

  return Engine;
}();

Engine.TOTAL_BUCKETS = 10000;
Engine.TRAFFIC_ALLOCATION_SALT = 'tas';

export { AudienceEvaluator, Bucketer, Config, Engine };
